options {
    STATIC = false;
    UNICODE_INPUT = true;
    JDK_VERSION = "1.8";
}
PARSER_BEGIN(Parser)
package net.zero918nobita.Xemime.parser;
import java.io.*;

class Parser {
    public static void main(String[] args) {
        try {
            Parser parser =  new Parser(new BufferedReader(new FileReader(args[0])));
            parser.compilation_unit();
        } catch (ParseException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
PARSER_END(Parser)

SKIP:
{
    " "
    | "\t"
    | "\n"
    | "\r"
    | < "//" (~[ "\n", "\r" ])* ( "\n" | "\r" | "\r\n" ) >
    | < "/*" (~[ "*" ])* "*" ( ~[ "/" ] (~[ "*" ])* "*" )* "/" >
}

TOKEN: {
    <ADD: "+">
    | <AND: "&&">
    | <DIV: "/">
    | <EQ: "==">
    | <G: ">">
    | <GE: ">=">
    | <IMPORT: "import">
    | <INTEGER: ["1"-"9"](["0"-"9"])*>
    | <L: "<">
    | <LE: "<=">
    | <MUL: "*">
    | <NE: "!=">
    | <NIL: "NIL">
    | <OR: "||">
    | <STATIC: "static">
    | <SUB: "-">
    | <T: "T">
}

TOKEN: {
    <IDENTIFIER: ["a"-"z", "A"-"Z", "_"] (["a"-"z", "A"-"Z", "_", "0"-"9"])*>
}

void compilation_unit() : {}
{
    (expr() ";")* <EOF>
}

void expr() : {}
{
    simple_expr() ( ( <EQ> | <NE> | <L> | <LE> | <G> | <GE>) simple_expr() )*
}

void simple_expr() : {}
{
    term() ( ( <ADD> | <SUB> | <OR> ) term() )*
}

void term() : {}
{
    factor() ( ( <MUL> | <DIV> | <AND> ) factor() )*
}

void factor() : {}
{
    first() | <NIL> | <T> | "!" factor()
}

void first() : {}
{
    <IDENTIFIER> | <INTEGER> | "-" first()
}
