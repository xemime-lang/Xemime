@startuml{xemime.png}

package net.zero918nobita.Xemime.ast {
    +class AssignNode {
        +AssignNode(int location, Symbol symbol, Node node)
        +Node run() throws Exception
    }

    AssignNode --|> ExprNode

    +class BlockNode {
        +BlockNode(int location, ArrayList<Node> list)
        +Node run() throws Exception
    }

    BlockNode --|> Node

    +class DeclareNode {
        +DeclareNode(int location, Symbol symbol, Node node)
        +Node run() throws Exception
    }

    DeclareNode --|> ExprNode

    +class DotAssignNode {
        +DotAssignNode(int location, Node object, Symbol sym, Node rhs)
        +Node run() throws Exception
    }

    DotAssignNode --|> Node

    +class DotCallNode {
        +DotCallNode(int location, Node object, Symbol sym, ArrayList<Node> list)
        +Node run() throws Exception
    }

    DotCallNode --|> Node

    +class DotExprNode {
        +DotExprNode(int location, Node object, Symbol sym)
        +Node run() throws Exception
    }

    DotExprNode --|> Node

    +class ExprNode {
        -TokenType op
        ~Node lhs
        ~Node rhs
        +ExprNode(int location, TokenType operator, Node lhs, Node rhs)
        +Node run() throws Exception
    }

    ExprNode --|> Node

    +class FuncallNode {
        -Node func
        -ArrayList<Node> list
        +FuncallNode(int location, Node node, ArrayList<Node> list) throws Exception
    }

    FuncallNode --|> Node

    +class LambdaExprNode {
        -int line
        -ArrayList<Symbol> params
        -Node body
        +LambdaExprNode(int location, ArrayList<Symbol> params, Node body)
        +Node run() throws Exception
    }

    LambdaExprNode --|> Node

    +class MinusNode {
        -Node node
        +MinusNode(int location, Node node)
        +Node run() throws Exception
    }

    MinusNode --|> Node

    +class Node {
        -int location
        +Node(int location)
        +int getLocation()
        +Node run() throws Exception
        +Node add(Node rhs) throws Exception
        +Node sub(Node rhs) throws Exception
        +Node multiply(Node rhs) throws Exception
        +Node divide(Node rhs) throws Exception
        +Bool less(int location, Node rhs) throws Exception
        +Bool le(int location, Node rhs) throws Exception
        +Bool greater(int location, Node rhs) throws Exception
        +Bool ge(int location, Node rhs) throws Exception
        +Bool and(int location, Node rhs) throws Exception
        +Bool or(int location, Node rhs) throws Exception
        +Bool xor(int location, Node rhs) throws Exception
        +Node message(int location, Symbol symbol) throws Exception
    }

    +class NotNode {
        -Node node
        +NotNode(int location, Node node)
        +Node run() throws Exception
    }

    NotNode --|> Node

    +class Symbol {
        +Symbol(int location, String name)
        +boolean equals(Object obj)
        +int hashCode()
        +String getName()
        +{static}Symbol intern(int n, String s)
    }

    Symbol --|> Node
}

package net.zero918nobita.Xemime.entity {
    +class Address {
        -int address
        +Address(int location, int address)
        +getAddress()
        +toString()
        +boolean equals(Object obj)
        +int hashCode()
        +compareTo(Object obj)
    }

    Address --|> Node
    Address ..|> java.lang.Comparable

    +class Bool {

    }

    Bool --|> Node

    +class Closure {
    }

    Closure --|> Function

    +class Default {
    }

    Default --|> Handler

    +class Double {
    }

    Double --|> Node

    +abstract class Function {
    }

    Function --|> Node

    +class Handler {
    }

    Handler --|> Node

    +class Int {
    }

    Int --|> Node

    +class Native {
    }

    Native --|> Function

    ~class Numeric {
    }

    Numeric --|> Node

    +class Str {
    }

    Str --|> Node
}

package net.zero918nobita.Xemime.interpreter {
    +class Frame {
    }

    +class Main {
        -{static} Parser parser
        -{static} TreeMap<Address, Node> entities
        -{static} boolean allowExitMethod
        +{static} Default defaultObj
        +{static} Frame frame
        +{static} void main(String[] args)
        +{static} void loadLocalFrame(Handler table)
        +{static} void unloadLocalFrame()
        +{static} boolean hasSymbol(Symbol sym)
        +{static} Address getAddressOfSymbol(Symbol sym) throws Exception
        +{static} Node getValueOfSymbol(Symbol sym) throws Exception
        +{static} Node getValueOfReference(Address address)
        +{static} void setAddress(Symbol sym, Address ref) throws Exception
        +{static} void setValue(Symbol sym, Node obj) throws Exception
        +{static} void defAddress(Symbol sym, Address ref) throws Exception
        +{static} void defValue(Symbol sym, Node obj) throws Exception
        +{static} Address register(Node node)
        +{static} void exec(String source) throws Exception
        +{static} boolean allowExitMethod()
        -{static} void usage()
    }
}

package net.zero918nobita.Xemime.lexer {
    class Lexer {
    }

    class LexerReader {
    }

    enum TokenType {
        T
        NIL
        INT
        DOUBLE
        STRING
        SYMBOL
        DECLARE
        ASSIGN
        SEMICOLON
        COMMA
        EOS
        ADD
        SUB
        MUL
        DIV
        EQ
        EQL
        NE
        L
        LE
        G
        GE
        AND
        OR
        XOR
        NOT
        LP
        RP
        LB
        RB
        LAMBDA
        ARROW
        PERIOD
    }
}

package net.zero918nobita.Xemime.parser {
    class Args {
    }

    Args --|> ParseUnit

    class Block {
    }

    Block --|> ParseUnit

    class DivideByZeroError {
    }

    DivideByZeroError --|> java.lang.Exception

    class Expr {
    }

    Expr --|> ParseUnit

    class Factor {
    }

    Factor --|> ParseUnit

    class FatalError {
    }

    FatalError --|> java.lang.Exception

    class First {
    }

    First --|> ParseUnit

    class Lambda {
    }

    Lambda --|> ParseUnit

    class MethodCall {
    }

    MethodCall --|> ParseUnit

    class Parser {
    }

    class ParseUnit {
    }

    class SimpleExpr {
    }

    SimpleExpr --|> ParseUnit

    class Statement {
    }

    Statement --|> ParseUnit

    class SyntaxError {
    }

    SyntaxError --|> java.lang.Exception

    class Term {
    }

    Term --|> ParseUnit
}

package net.zero918nobita.Xemime.resolver {
    class Resolver {
    }

    class Scope {
    }

    class SemanticError {
    }

    SemanticError --|> java.lang.Exception
}

package net.zero918nobita.Xemime.utils {
    class VirtualMemoryMonitor {
    }
}

package java.lang {
    interface Comparable {
    }
}

@enduml
